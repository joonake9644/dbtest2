---
description: ISMS-P Based Security Guidelines for Meeting Room System
globs: 
alwaysApply: true
---

# 회의실 관리 시스템 보안 가이드라인

본 문서는 ISMS-P 기반 보안 요구사항을 **회의실 관리 시스템 MVP**에 적합하도록 조정한 실용적 보안 가이드라인입니다.

## 시스템 특성 고려사항

**회의실 예약 시스템의 특성:**
- 내부 직원 대상 서비스 (제한적 사용자)
- 민감정보 최소화 (이름, 휴대폰번호만 수집)
- MVP 단순성 vs 보안 요구사항 균형
- Next.js + TypeScript + Supabase 기술 스택

## 1. 인증 및 권한 관리

### (A-1) 사용자 식별 및 인증 (MVP 적용)
- **MUST**: 예약자는 **휴대폰번호**로 개별 식별 가능해야 함
- **MUST**: 예약 비밀번호는 다음 정책 중 하나를 만족해야 함:
  - (a) **4자리 이상 숫자+문자 조합** (사용자 편의성 고려)
  - (b) 8자리 이상 문자, 숫자 조합
- **SHOULD**: 동일 휴대폰번호로 **연속 5회 실패 시 5분간 일시 제한** 구현

```typescript
// TypeScript 구현 예시
const passwordSchema = z.string()
  .min(4, '비밀번호는 4자리 이상 입력해주세요')
  .regex(/^(?=.*[A-Za-z])(?=.*\d)/, '영문과 숫자를 포함해야 합니다');

// 실패 횟수 추적 (메모리 기반 - MVP용)
const loginAttempts = new Map<string, { count: number; lastAttempt: Date }>();
```

### (A-2) 인증 정보 관리 (Supabase 적용)
- **MUST**: 예약 비밀번호는 **bcrypt** 해싱하여 저장
- **MUST**: Supabase의 암호화 기능 활용
- **MUST NOT**: 비밀번호 평문 저장 금지

```sql
-- Supabase에서 암호화 함수 사용
CREATE OR REPLACE FUNCTION hash_password(password text)
RETURNS text AS $$
BEGIN
  RETURN crypt(password, gen_salt('bf'));
END;
$$ LANGUAGE plpgsql;
```

### (A-3) 권한 관리 (단순화)
- **MUST**: **최소 권한 원칙** 적용
  - 일반 사용자: 예약 생성/조회/취소만
  - 관리자: 회의실 CRUD + 전체 예약 조회
- **MUST**: 권한 변경 시 **로그 기록** (Supabase 감사 로그 활용)

```typescript
// TypeScript 권한 체크
enum UserRole {
  USER = 'user',
  ADMIN = 'admin'
}

interface UserPermissions {
  canCreateReservation: boolean;
  canViewAllReservations: boolean;
  canManageRooms: boolean;
}

const getPermissions = (role: UserRole): UserPermissions => {
  switch (role) {
    case UserRole.USER:
      return {
        canCreateReservation: true,
        canViewAllReservations: false,
        canManageRooms: false
      };
    case UserRole.ADMIN:
      return {
        canCreateReservation: true,
        canViewAllReservations: true,
        canManageRooms: true
      };
  }
};
```

## 2. 접근 제어

### (AC-1) 시스템 접근 (Next.js + Vercel)
- **MUST**: 무단 접근 차단 (Vercel의 기본 보안 기능 활용)
- **MUST**: **중요 작업 로그 1년간 보관**
  - 예약 생성/수정/삭제
  - 관리자 회의실 관리 작업
  - 로그인 시도 (성공/실패)

### (AC-2) 네트워크 접근 (클라우드 환경)
- **MUST**: **Vercel의 기본 방화벽** 설정 유지
- **MUST**: **Supabase RLS 비활성화** (MVP 요구사항) 하되, 애플리케이션 레벨 접근 제어 구현
- **SHOULD**: 프로덕션에서는 **Vercel IP 화이트리스트** 고려

## 3. 암호화

### (C-1) 민감정보 암호화 (회의실 시스템 적용)
- **MUST**: **휴대폰번호 마스킹** 표시 (010-****-1234)
- **MUST**: **예약 비밀번호 해싱** 저장
- **MUST**: **HTTPS 통신** (Vercel 기본 제공)
- **회의실 시스템에서는 신용카드, 주민번호 등 수집하지 않으므로 해당 암호화 요구사항 제외**

```typescript
// 휴대폰번호 마스킹 유틸리티
export const maskPhoneNumber = (phone: string): string => {
  if (!/^010-\d{4}-\d{4}$/.test(phone)) return phone;
  return phone.replace(/(\d{3})-(\d{4})-(\d{4})/, '$1-****-$3');
};

// 사용 예시
const displayPhone = maskPhoneNumber(reservation.reserver_phone);
// 출력: "010-****-1234"
```

### (C-2) 암호화 키 관리 (Vercel + Supabase)
- **MUST**: **환경변수**로 키 관리 (Vercel Environment Variables)
- **MUST NOT**: 소스코드에 하드코딩 금지
- **MUST**: **Supabase 키 보안** 관리

```bash
# .env.local (개발환경)
NEXT_PUBLIC_SUPABASE_URL=https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJxxx...
SUPABASE_SERVICE_ROLE_KEY=eyJxxx... # 서버에서만 사용

# Vercel 환경변수 설정 (프로덕션)
vercel env add NEXT_PUBLIC_SUPABASE_URL
vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY
```

## 4. 보안 개발

### (D-1) 보안 설계 (Next.js + TypeScript)
- **MUST**: **OWASP Top 10 대응** 설계
  - **SQL Injection**: Supabase ORM 사용
  - **XSS**: Next.js 기본 보호 + 입력 검증
  - **CSRF**: Next.js CSRF 토큰 사용

### (D-2) 보안 코딩 (TypeScript 강화)
- **MUST**: **모든 외부 입력 검증** (Zod 스키마 활용)
- **MUST**: **Parameterized Query** 사용 (Supabase 기본)
- **MUST**: **에러 정보 노출 금지** (프로덕션에서 스택 트레이스 숨김)

```typescript
// Zod를 활용한 입력 검증
const reservationInputSchema = z.object({
  reserver_name: z.string()
    .min(1, '이름을 입력해주세요')
    .max(50, '이름은 50자 이하로 입력해주세요')
    .regex(/^[가-힣a-zA-Z\s]+$/, '이름은 한글, 영문만 입력 가능합니다'),
  reserver_phone: z.string()
    .regex(/^010-\d{4}-\d{4}$/, '올바른 휴대폰번호를 입력해주세요'),
  reserver_password: z.string()
    .min(4, '비밀번호는 4자리 이상 입력해주세요')
    .max(20, '비밀번호는 20자리 이하로 입력해주세요'),
});

// 안전한 에러 처리
export function handleError(error: unknown): { message: string } {
  if (process.env.NODE_ENV === 'development') {
    console.error('Detailed error:', error);
  }
  
  return {
    message: error instanceof Error 
      ? '처리 중 오류가 발생했습니다' 
      : '알 수 없는 오류가 발생했습니다'
  };
}
```

### (D-3) 보안 테스트 (MVP 범위)
- **SHOULD**: **ESLint Security Plugin** 사용
- **SHOULD**: **TypeScript strict mode** 활성화
- **SHOULD**: 프로덕션 배포 전 **보안 체크리스트** 확인

```bash
# ESLint 보안 플러그인 설치
npm install --save-dev eslint-plugin-security

# .eslintrc.js 설정
{
  "extends": ["plugin:security/recommended"],
  "rules": {
    "security/detect-object-injection": "error",
    "security/detect-non-literal-regexp": "error"
  }
}
```

## 5. 개인정보 처리 (회의실 시스템 특화)

### (P-1) 수집 및 이용 (최소화 원칙)
- **MUST**: **최소 개인정보만 수집** (이름, 휴대폰번호, 비밀번호)
- **MUST**: 수집 목적 명시 및 동의 (회의실 예약 서비스 제공)
- **MUST NOT**: **불필요한 개인정보 수집 금지** (생년월일, 주소 등)

```typescript
// 최소 개인정보 인터페이스
interface ReservationPersonalInfo {
  reserver_name: string;      // 필수: 예약자 확인용
  reserver_phone: string;     // 필수: 예약 조회 키
  reserver_password: string;  // 필수: 예약 조회 인증
  // 추가 개인정보 수집 금지
}
```

### (P-2) 저장 및 표시 (마스킹)
- **MUST**: **휴대폰번호 마스킹** 표시 (010-****-1234)
- **MUST**: **비밀번호 해싱** 저장
- **MUST NOT**: 제3자 제공 금지 (내부 회의실 관리 목적만)

```typescript
// 안전한 예약 정보 표시
interface SafeReservationDisplay {
  id: string;
  room_name: string;
  reservation_date: string;
  start_time: string;
  end_time: string;
  reserver_name: string;
  masked_phone: string;        // 마스킹된 휴대폰번호
  status: ReservationStatus;
  // reserver_password는 표시하지 않음
}

export const toSafeDisplay = (reservation: Reservation): SafeReservationDisplay => ({
  ...reservation,
  masked_phone: maskPhoneNumber(reservation.reserver_phone),
  reserver_password: undefined, // 제거
});
```

### (P-3) 파기 (자동화)
- **MUST**: **예약 만료 후 자동 파기** (6개월 후)
- **MUST**: **파기 로그 기록**

```sql
-- Supabase에서 자동 파기 함수
CREATE OR REPLACE FUNCTION auto_delete_old_reservations()
RETURNS void AS $$
BEGIN
  DELETE FROM reservations 
  WHERE reservation_date < CURRENT_DATE - INTERVAL '6 months';
  
  INSERT INTO deletion_logs (table_name, deleted_count, deleted_at)
  VALUES ('reservations', ROW_COUNT, NOW());
END;
$$ LANGUAGE plpgsql;

-- 정기 실행 (Supabase Edge Functions)
SELECT cron.schedule('delete-old-reservations', '0 2 * * *', 'SELECT auto_delete_old_reservations();');
```

## 6. 로깅 및 관리

### (L-1) 로그 기록 (Next.js + Supabase)
- **MUST**: **중요 활동 로그 1년간 보관**
  - 예약 생성/수정/취소
  - 관리자 회의실 관리
  - 인증 시도 (성공/실패)
- **MUST**: 로그 표준화 (타임스탬프, 사용자 식별, IP, 작업, 결과)

```typescript
// 표준화된 로그 인터페이스
interface AuditLog {
  timestamp: string;           // ISO 8601 형식
  user_identifier: string;     // 휴대폰번호 (마스킹)
  source_ip: string;          // 클라이언트 IP
  action: string;             // 수행한 작업
  resource: string;           // 대상 리소스
  result: 'SUCCESS' | 'FAILURE'; // 결과
  details?: string;           // 추가 상세 정보
}

// 로그 기록 함수
export const logAuditEvent = async (event: Omit<AuditLog, 'timestamp'>) => {
  const auditLog: AuditLog = {
    ...event,
    timestamp: new Date().toISOString(),
    user_identifier: maskPhoneNumber(event.user_identifier),
  };
  
  await supabase.from('audit_logs').insert(auditLog);
};

// 사용 예시
await logAuditEvent({
  user_identifier: phone,
  source_ip: req.ip,
  action: 'CREATE_RESERVATION',
  resource: `room:${roomId}`,
  result: 'SUCCESS',
  details: `${date} ${startTime}-${endTime}`
});
```

## 7. MVP vs 프로덕션 보안 로드맵

### MVP 단계 (현재)
- ✅ 기본 입력 검증 (Zod)
- ✅ 비밀번호 해싱 (bcrypt)
- ✅ HTTPS 통신 (Vercel)
- ✅ 휴대폰번호 마스킹
- ✅ 기본 에러 처리

### 프로덕션 단계 (향후)
- 🔄 계정 잠금 정책 구현
- 🔄 상세 감사 로그 시스템
- 🔄 개인정보 자동 파기
- 🔄 보안 모니터링
- 🔄 정기 보안 점검

## 8. 보안 체크리스트

### 개발 시 확인사항
- [ ] 모든 외부 입력에 Zod 검증 적용
- [ ] 비밀번호 평문 저장 방지
- [ ] 휴대폰번호 마스킹 표시
- [ ] 에러 메시지에 내부 정보 노출 방지
- [ ] 환경변수로 민감정보 관리

### 배포 시 확인사항
- [ ] 프로덕션 환경변수 설정
- [ ] HTTPS 인증서 적용
- [ ] 로그 수집 설정
- [ ] 에러 추적 도구 연동
- [ ] 백업 정책 수립

## 9. 기술별 보안 구현

### Next.js 보안
```typescript
// next.config.js 보안 헤더
const nextConfig = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
    ];
  },
};
```

### TypeScript 보안
```typescript
// 타입 안전한 환경변수 접근
const config = {
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,
  supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
} as const;

// 런타임 환경변수 검증
const envSchema = z.object({
  NEXT_PUBLIC_SUPABASE_URL: z.string().url(),
  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1),
});

envSchema.parse(process.env);
```

### Supabase 보안
```sql
-- RLS 대신 애플리케이션 레벨 보안
-- 민감한 컬럼 암호화
CREATE TABLE reservations (
  id UUID PRIMARY KEY,
  reserver_phone_encrypted TEXT, -- 암호화된 휴대폰번호
  reserver_password_hash TEXT,   -- 해싱된 비밀번호
  -- 기타 필드들
);
```

이 보안 가이드라인은 **ISMS-P 요구사항과 MVP 현실성의 균형**을 맞춘 실용적 접근법을 제시합니다. 단계적으로 보안을 강화하면서 사용자 편의성과 개발 효율성을 유지할 수 있습니다.