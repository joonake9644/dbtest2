---
description: Supabase Guidelines for Meeting Room System
globs: supabase/migrations/*.sql
---

# 회의실 관리 시스템 Supabase 가이드라인

## 회의실 시스템 Migration 규칙

### 파일 네이밍 규칙
```
supabase/migrations/
├── 20241215000001_create_meeting_rooms.sql
├── 20241215000002_create_reservations.sql  
├── 20241215000003_add_sample_data.sql
```

### Migration 작성 규칙

#### 1. 테이블 생성 패턴
```sql
-- 항상 IF NOT EXISTS 사용
CREATE TABLE IF NOT EXISTS meeting_rooms (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    location VARCHAR(200) NOT NULL,
    capacity INTEGER NOT NULL CHECK (capacity > 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- RLS 비활성화 (요구사항)
ALTER TABLE meeting_rooms DISABLE ROW LEVEL SECURITY;
```

#### 2. 제약조건 추가 패턴
```sql
-- GIST 확장 활성화
CREATE EXTENSION IF NOT EXISTS btree_gist;

-- 시간 중복 방지 제약조건
ALTER TABLE reservations 
ADD CONSTRAINT IF NOT EXISTS no_overlapping_reservations 
EXCLUDE USING GIST (
    room_id WITH =,
    reservation_date WITH =,
    tsrange(start_time::text, end_time::text) WITH &&
) WHERE (status = 'active');
```

#### 3. 인덱스 생성 패턴
```sql
-- 성능 최적화 인덱스
CREATE INDEX IF NOT EXISTS idx_reservations_phone 
ON reservations(reserver_phone);

CREATE INDEX IF NOT EXISTS idx_reservations_date_room 
ON reservations(reservation_date, room_id, status);

CREATE INDEX IF NOT EXISTS idx_meeting_rooms_name 
ON meeting_rooms(name);
```

### 회의실 시스템 필수 컬럼

#### meeting_rooms 테이블
```sql
-- 필수 컬럼
id UUID PRIMARY KEY                    -- 고유 식별자
name VARCHAR(100) NOT NULL UNIQUE      -- 회의실 이름 (중복 불가)
location VARCHAR(200) NOT NULL         -- 위치
capacity INTEGER NOT NULL              -- 수용 인원
created_at TIMESTAMP WITH TIME ZONE   -- 생성 시간
updated_at TIMESTAMP WITH TIME ZONE   -- 수정 시간
```

#### reservations 테이블  
```sql
-- 필수 컬럼
id UUID PRIMARY KEY                    -- 예약 고유 식별자
room_id UUID REFERENCES meeting_rooms(id) -- 회의실 참조
reservation_date DATE NOT NULL         -- 예약 날짜
start_time TIME NOT NULL              -- 시작 시간
end_time TIME NOT NULL                -- 종료 시간
reserver_name VARCHAR(50) NOT NULL    -- 예약자 이름
reserver_phone VARCHAR(20) NOT NULL   -- 예약자 휴대폰번호
reserver_password VARCHAR(100) NOT NULL -- 예약 비밀번호
status VARCHAR(20) DEFAULT 'active'   -- 예약 상태
created_at TIMESTAMP WITH TIME ZONE  -- 예약 생성 시간
updated_at TIMESTAMP WITH TIME ZONE  -- 예약 수정 시간
```

### 트리거 함수 (updated_at 자동화)
```sql
-- updated_at 자동 업데이트 함수
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 트리거 적용
CREATE TRIGGER update_meeting_rooms_updated_at 
    BEFORE UPDATE ON meeting_rooms 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reservations_updated_at 
    BEFORE UPDATE ON reservations 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();
```

### 샘플 데이터 (개발/테스트용)
```sql
-- 회의실 샘플 데이터
INSERT INTO meeting_rooms (name, location, capacity) VALUES 
('휴게실 A', '1층 동쪽', 4),
('휴게실 B', '1층 서쪽', 6),
('휴게실 C', '2층 중앙', 8),
('휴게실 D', '2층 북쪽', 4),
('휴게실 E', '3층 남쪽', 10)
ON CONFLICT (name) DO NOTHING;

-- 예약 샘플 데이터  
INSERT INTO reservations (room_id, reservation_date, start_time, end_time, reserver_name, reserver_phone, reserver_password) 
SELECT 
    (SELECT id FROM meeting_rooms WHERE name = '휴게실 A'),
    CURRENT_DATE,
    '09:00',
    '10:00',
    '김철수',
    '010-1234-5678',
    'password123'
WHERE NOT EXISTS (
    SELECT 1 FROM reservations 
    WHERE room_id = (SELECT id FROM meeting_rooms WHERE name = '휴게실 A')
    AND reservation_date = CURRENT_DATE 
    AND start_time = '09:00'
);
```

### Migration 검증 쿼리
```sql
-- 테이블 생성 확인
SELECT tablename FROM pg_tables WHERE schemaname = 'public';

-- 제약조건 확인
SELECT conname, contype FROM pg_constraint WHERE conrelid = 'reservations'::regclass;

-- 인덱스 확인  
SELECT indexname FROM pg_indexes WHERE tablename IN ('meeting_rooms', 'reservations');

-- 샘플 데이터 확인
SELECT COUNT(*) FROM meeting_rooms;
SELECT COUNT(*) FROM reservations;
```

### 회의실 시스템 특화 쿼리 패턴

#### 예약 현황 조회
```sql
-- 특정 날짜의 전체 예약 현황
SELECT 
    mr.id,
    mr.name,
    mr.location,
    mr.capacity,
    COALESCE(
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'id', r.id,
                'start_time', r.start_time,
                'end_time', r.end_time,
                'reserver_name', r.reserver_name,
                'status', r.status
            ) ORDER BY r.start_time
        ) FILTER (WHERE r.id IS NOT NULL),
        '[]'::json
    ) as reservations
FROM meeting_rooms mr
LEFT JOIN reservations r ON mr.id = r.room_id 
    AND r.reservation_date = CURRENT_DATE
    AND r.status = 'active'
GROUP BY mr.id, mr.name, mr.location, mr.capacity
ORDER BY mr.name;
```

#### 시간 중복 확인
```sql
-- 새 예약 시간 중복 확인
SELECT COUNT(*) FROM reservations 
WHERE room_id = $1 
AND reservation_date = $2 
AND status = 'active'
AND tsrange($3::text, $4::text) && tsrange(start_time::text, end_time::text);
```

### 에러 처리 및 복구

#### 일반적인 에러 상황
```sql
-- 중복 예약 시도 시 제약조건 위반
-- 23P01: exclusion_violation (GIST 제약조건)

-- 외래키 제약조건 위반  
-- 23503: foreign_key_violation

-- 유니크 제약조건 위반
-- 23505: unique_violation
```

### 성능 모니터링 쿼리
```sql
-- 자주 사용되는 쿼리 성능 확인
EXPLAIN ANALYZE 
SELECT * FROM reservations 
WHERE reserver_phone = '010-1234-5678' 
AND reserver_password = 'password123';

-- 인덱스 사용량 확인
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_tup_read,
    idx_tup_fetch
FROM pg_stat_user_indexes
WHERE tablename IN ('meeting_rooms', 'reservations');
```

### 백업 및 복구 전략
```sql
-- 중요 데이터 백업 (예약 데이터)
COPY reservations TO '/backup/reservations_backup.csv' WITH CSV HEADER;

-- 회의실 설정 백업
COPY meeting_rooms TO '/backup/meeting_rooms_backup.csv' WITH CSV HEADER;
```

### Migration 체크리스트

새 Migration 작성 시 확인사항:
- [ ] `IF NOT EXISTS` 구문 사용
- [ ] RLS 비활성화 설정
- [ ] 적절한 인덱스 생성  
- [ ] 외래키 제약조건 설정 (CASCADE 고려)
- [ ] 샘플 데이터 포함 (중복 방지)
- [ ] 트리거 함수 적용
- [ ] 검증 쿼리 포함

### 주의사항

1. **RLS는 비활성화** (프로젝트 요구사항)
2. **한 번에 하나의 Migration 파일만 생성**
3. **샘플 데이터는 개발환경에서만 사용**
4. **프로덕션에서는 샘플 데이터 제외**
5. **Migration은 항상 idempotent하게 작성**