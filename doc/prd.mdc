---
description: Product Requirements Document for Meeting Room System
globs:
alwaysApply: true
---

# PRD - 회의실 관리 시스템

## 1. 제품 개요

### 1.1 프로젝트 목표
- **MVP 회의실 관리 시스템 개발**
- **사용자**: 회의실 예약 및 조회 기능
- **관리자**: 회의실 CRUD 관리 기능
- **모던하고 심플한 디자인** (Apple 스타일)

### 1.2 기술 스택
- **Frontend**: Next.js 14+ (App Router), TypeScript
- **Backend**: Supabase (PostgreSQL 15+)
- **배포**: Vercel (GitHub 연동 자동 배포)
- **스타일링**: Tailwind CSS + shadcn-ui
- **실시간**: Supabase Realtime
- **폼 관리**: React Hook Form + Zod

### 1.3 핵심 원칙
- **Over Engineering 방지**
- **기본에 충실한 구현**
- **에러 상황 최소화**
- **실시간 데이터 동기화**
- **타입 안전성 보장** (TypeScript)

## 2. 사용자 요구사항

### 2.1 사용자 (일반)

#### 전체 예약 현황 조회
- 5개 휴게실의 실시간 예약 현황 확인
- 날짜별, 시간대별 예약 상태 시각화
- 예약 가능한 시간대 표시
- 모바일 반응형 지원

#### 회의실 예약
- 원하는 휴게실과 시간대 선택
- 예약자 정보 입력 (이름, 휴대폰번호, 비밀번호)
- 중복 예약 방지 및 실시간 검증
- 예약 완료 즉시 현황 업데이트

#### 내 예약 조회
- 휴대폰번호 + 비밀번호로 개인 예약 조회
- 예약 상세 정보 확인
- 예약 취소 기능 (제한 시간 내)

### 2.2 관리자

#### 회의실 관리 (CRUD)
- **회의실 등록** (이름, 위치, 수용인원)
- **회의실 정보 수정**
- **회의실 삭제** (기존 예약 처리)
- **회의실 목록 조회**

## 3. 기능 스펙

### 3.1 회의실 정보
- **회의실 수량**: 5개 휴게실
- **회의실 속성**: 이름, 위치, 수용 가능 인원
- **기본 제공**: 휴게실 A~E (더미 데이터)

### 3.2 예약 시스템
- **예약 단위**: 30분 단위
- **예약 정보**: 날짜, 시작시간, 종료시간, 예약자 정보
- **인증 방식**: 휴대폰번호 + 비밀번호
- **상태 관리**: 활성(active), 취소(cancelled)

### 3.3 시간 관리
- **중복 방지**: 동일 회의실, 동일 시간 중복 예약 불가
- **실시간 동기화**: 예약 생성/취소 시 즉시 현황 업데이트

## 4. 사용자 스토리

### 4.1 사용자 시나리오

**Story 1: 회의실 예약**
```
As a 사용자
I want to 전체 예약 현황을 보고 원하는 시간에 회의실을 예약하고 싶다
So that 필요할 때 회의 공간을 확보할 수 있다

Given 전체 예약 현황 페이지에 접근했을 때
When 원하는 회의실의 예약 버튼을 클릭하고
And 날짜, 시간, 개인정보를 입력하면
Then 예약이 생성되고 현황이 즉시 업데이트된다
```

**Story 2: 내 예약 조회**
```
As a 사용자  
I want to 내가 예약한 회의실을 조회하고 관리하고 싶다
So that 예약 현황을 확인하고 필요시 취소할 수 있다

Given 내 예약 조회 페이지에서
When 휴대폰번호와 비밀번호를 입력하면
Then 내 예약 목록이 표시되고 취소할 수 있다
```

### 4.2 관리자 시나리오

**Story 3: 회의실 관리**
```
As a 관리자
I want to 회의실을 등록, 수정, 삭제하고 싶다
So that 회의실 운영을 효율적으로 관리할 수 있다

Given 관리자 페이지에 접근했을 때
When 회의실 정보를 입력하거나 수정하면
Then 변경사항이 즉시 반영되고 사용자에게 보여진다
```

## 5. 상세 유저플로우

### 5.1 회의실 예약 플로우
```
입력: 전체 현황 페이지(/) → 회의실 선택 → 예약 버튼 클릭 → 정보 입력
처리: 시간 중복 확인 → 유효성 검증 → DB 저장 → 실시간 업데이트
출력: 예약 완료 메시지 → 업데이트된 현황 표시
```

### 5.2 내 예약 조회 플로우
```
입력: 조회 페이지(/my-reservations) → 휴대폰번호/비밀번호 입력 → 조회 버튼
처리: 인증 확인 → 개인 예약 데이터 조회 → 목록 생성
출력: 예약 목록 표시 → 상세 정보 및 취소 옵션
```

### 5.3 관리자 회의실 관리 플로우
```
입력: 관리자 페이지(/admin) → CRUD 버튼 → 회의실 정보 입력/수정
처리: 권한 확인 → 데이터 유효성 검증 → DB 업데이트
출력: 성공 메시지 → 업데이트된 회의실 목록
```

## 6. 화면 구성

### 6.1 사용자 화면
- **메인 페이지** (`app/page.tsx`): 전체 예약 현황 + 예약 기능
- **내 예약 페이지** (`app/my-reservations/page.tsx`): 개인 예약 조회 및 관리

### 6.2 관리자 화면
- **관리자 페이지** (`app/admin/page.tsx`): 회의실 CRUD 관리

### 6.3 공통 요소
- **네비게이션**: 사용자/관리자 페이지 전환
- **모달**: 예약 생성, 회의실 관리 폼
- **알림**: 성공/오류 메시지 표시
- **로딩 상태**: 비동기 작업 진행 상황

### 6.4 컴포넌트 구조
```
src/
├── app/                       # Next.js App Router
│   ├── layout.tsx            # 루트 레이아웃
│   ├── page.tsx              # 홈페이지 (예약 현황)
│   ├── my-reservations/      # 내 예약 조회
│   │   └── page.tsx
│   └── admin/                # 관리자 페이지
│       └── page.tsx
├── components/
│   ├── ui/                   # shadcn-ui 컴포넌트
│   ├── user/                 # 사용자 컴포넌트
│   ├── admin/                # 관리자 컴포넌트
│   └── common/               # 공통 컴포넌트
└── lib/services/             # 비즈니스 로직
```

## 7. 비기능적 요구사항

### 7.1 성능
- **응답 시간**: 2초 이내 페이지 로딩
- **실시간성**: 1초 이내 데이터 동기화
- **번들 크기**: 최적화된 코드 분할

### 7.2 사용성
- **반응형 디자인**: 모바일/태블릿/데스크톱 지원
- **직관적 UI**: 최소한의 클릭으로 주요 기능 접근
- **에러 처리**: 명확한 오류 메시지 제공
- **접근성**: WCAG 2.1 AA 수준 지원

### 7.3 안정성
- **데이터 무결성**: 중복 예약 방지, 트랜잭션 보장
- **에러 복구**: 네트워크 오류 시 재시도 로직
- **타입 안전성**: TypeScript로 런타임 오류 방지

## 8. 제약사항

### 8.1 기술적 제약
- **인증 시스템**: 별도 로그인 없이 휴대폰번호+비밀번호 방식
- **권한 관리**: 단순한 관리자/사용자 구분
- **데이터 보안**: RLS 비활성화 (단순한 구조 유지)

### 8.2 비즈니스 제약
- **예약 단위**: 최소 30분 단위 예약
- **예약 기간**: 당일부터 1주일 후까지
- **취소 정책**: 예약 시간 1시간 전까지 취소 가능

## 9. 기술적 구현사항

### 9.1 데이터베이스
```sql
-- 핵심 테이블
meeting_rooms: 회의실 정보 (5개 휴게실)
reservations: 예약 정보 (시간 중복 방지 제약조건)

-- 주요 제약조건
EXCLUDE USING GIST: 동시 예약 방지
CASCADE DELETE: 회의실 삭제 시 예약도 삭제
```

### 9.2 실시간 동기화
```typescript
// Supabase Realtime 구독
const subscription = supabase
  .channel('reservations')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'reservations'
  }, handleRealtimeUpdate)
  .subscribe();
```

### 9.3 타입 안전성
```typescript
// 데이터베이스 타입 정의
export interface Database {
  public: {
    Tables: {
      meeting_rooms: { /* ... */ };
      reservations: { /* ... */ };
    };
  };
}

// 서비스 결과 타입
export interface ServiceResult<T> {
  success: boolean;
  data?: T;
  error?: string;
}
```

## 10. 성공 지표

### 10.1 기능적 성공
- [ ] 5개 휴게실 등록 및 관리 가능
- [ ] 예약 생성/조회/취소 기능 정상 작동
- [ ] 시간 중복 방지 로직 작동
- [ ] 실시간 데이터 동기화 구현

### 10.2 사용자 경험
- [ ] 직관적인 예약 현황 시각화
- [ ] 3클릭 이내 예약 완료
- [ ] 명확한 피드백 및 에러 처리
- [ ] 모던하고 심플한 디자인 적용

### 10.3 기술적 성공
- [ ] TypeScript 컴파일 오류 0개
- [ ] 모바일 반응형 100% 지원
- [ ] 페이지 로딩 시간 2초 이내
- [ ] 실시간 업데이트 1초 이내

## 11. 향후 확장 계획

### 11.1 단기 확장 (v1.1)
- 이메일 알림 기능
- 예약 통계 대시보드
- 회의실 이미지 업로드

### 11.2 중기 확장 (v2.0)
- 사용자 인증 시스템
- 예약 승인 워크플로우
- 모바일 앱 개발

### 11.3 장기 확장 (v3.0)
- 다중 건물 지원
- API 개방
- 외부 캘린더 연동