---
description: User Flow for Meeting Room System  
globs: 
alwaysApply: true
---

# 회의실 관리 시스템 유저플로우

## 개요
본 문서는 Next.js 14+ (App Router) + Supabase + Vercel 스택을 사용한 회의실 관리 시스템의 핵심 유저플로우를 정의합니다. TypeScript 기반으로 시스템은 관리자(회의실 CRUD)와 사용자(예약 및 조회) 기능으로 구분됩니다.

## 1. 회의실 예약 (사용자)

### 입력 (사용자 상호작용)
1. 전체 예약 현황 페이지 접근 (`app/page.tsx`)
2. 회의실별 예약 현황 확인 (날짜별, 시간대별 예약 상태 조회)
3. 특정 회의실의 "예약하기" 버튼 클릭
4. 예약 모달에서 날짜 선택
5. 사용 가능한 시간대 중 원하는 시간 선택
6. 예약자 정보 입력 (이름, 휴대폰번호, 비밀번호)
7. 예약 확인 버튼 클릭

### 처리 (시스템 내부 로직)
1. **전체 회의실 예약 현황 데이터 조회 및 표시**
   ```typescript
   const rooms: RoomWithReservations[] = await roomService.getReservationsByDate(selectedDate);
   ```

2. **실시간 예약 상태 업데이트** (Supabase Realtime)
   ```typescript
   const subscription = supabase
     .channel('reservations')
     .on('postgres_changes', { event: '*', table: 'reservations' }, handleUpdate)
     .subscribe();
   ```

3. **선택한 회의실의 해당 날짜/시간 예약 가능 여부 재확인**
   ```typescript
   const isConflict = await reservationService.checkTimeConflict(roomId, date, startTime, endTime);
   ```

4. **입력 데이터 유효성 검증** (Zod 스키마 활용)
   ```typescript
   const validatedData = reservationSchema.parse(formData);
   ```

5. **동시성 처리** (GIST 제약조건으로 중복 방지)
6. **예약 데이터 Supabase 저장**
7. **전체 예약 현황 페이지 데이터 갱신**

### 출력 (사용자 피드백)
- **초기 진입**: 모든 회의실의 예약 현황 시각적 표시 (그리드 형태)
- **예약 진행**: 선택한 회의실 정보 및 사용 가능 시간 표시
- **성공 시**: 예약 완료 메시지, 업데이트된 전체 예약 현황 표시
- **실패 시**: TypeScript 타입 기반 구체적인 오류 메시지, 전체 현황 페이지로 복귀
- **내 예약 조회 페이지로의 이동 옵션 제공**

### 엣지케이스 대응
- 페이지 로딩 중 다른 사용자의 예약으로 인한 현황 변경
- 예약 진행 중 다른 사용자가 같은 시간 예약 완료 시
- 네트워크 오류로 인한 중복 제출 방지 (TypeScript + React Hook Form)
- 전체 현황 페이지에서 실시간 데이터 동기화 오류 처리

## 2. 내 예약 조회 (사용자)

### 입력 (사용자 상호작용)
1. 내 예약 조회 페이지 접근 (`app/my-reservations/page.tsx`)
2. 휴대폰번호 입력 (010-0000-0000 형식)
3. 비밀번호 입력
4. 조회 버튼 클릭
5. (조회 후) 특정 예약 선택하여 상세 정보 확인
6. (선택적) 예약 취소 버튼 클릭

### 처리 (시스템 내부 로직)
1. **입력된 휴대폰번호 형식 유효성 검증** (TypeScript + Zod)
   ```typescript
   const phoneSchema = z.string().regex(/^010-\d{4}-\d{4}$/, '올바른 휴대폰번호를 입력해주세요');
   ```

2. **휴대폰번호와 비밀번호 조합으로 예약 데이터 조회**
   ```typescript
   const reservations: Reservation[] = await reservationService.getMyReservations(phone, password);
   ```

3. **해당 휴대폰번호로 등록된 모든 예약 내역 검색**
4. **비밀번호 매칭 확인** (각 예약별로)
5. **조회된 예약 데이터 정렬** (최신순)
6. **(예약 취소 시) 취소 가능 시간 확인 및 상태 업데이트**

### 출력 (사용자 피드백)
- **성공 시**: 매칭된 예약 목록 표시 (회의실명, 예약일시, 예약자명, 상태)
- **예약 없음**: "해당 정보로 등록된 예약이 없습니다" 메시지
- **인증 실패**: "입력하신 정보와 일치하는 예약이 없습니다" 메시지
- **예약 상세**: 선택한 예약의 모든 정보 표시
- **취소 완료**: 취소 확인 메시지 및 업데이트된 예약 목록

### 엣지케이스 대응
- 잘못된 휴대폰번호 형식 입력 (Zod 스키마로 검증)
- 존재하지 않는 휴대폰번호 입력
- 올바른 휴대폰번호이지만 잘못된 비밀번호
- 동일 휴대폰번호로 여러 예약이 있지만 각기 다른 비밀번호
- 이미 지난 예약에 대한 취소 시도
- 네트워크 오류로 인한 조회 실패

## 3. 관리자 - 회의실 등록

### 입력 (사용자 상호작용)
1. 관리자 페이지 접근 (`app/admin/page.tsx`)
2. "새 회의실 등록" 버튼 클릭
3. 회의실 정보 입력
   - 회의실 이름 입력
   - 회의실 위치 입력
   - 수용 가능 인원수 입력
4. 등록 버튼 클릭

### 처리 (시스템 내부 로직)
1. **관리자 권한 확인** (단순 페이지 접근 기반)
2. **입력 데이터 유효성 검증** (Zod 스키마)
   ```typescript
   const roomSchema = z.object({
     name: z.string().min(1, '회의실 이름을 입력해주세요'),
     location: z.string().min(1, '회의실 위치를 입력해주세요'),
     capacity: z.number().min(1, '수용 인원은 1명 이상이어야 합니다')
   });
   ```

3. **회의실 이름 중복 확인** (UNIQUE 제약조건)
4. **필수 필드 입력 확인**
5. **수용 인원 숫자 형식 확인**
6. **회의실 데이터 Supabase 저장**
   ```typescript
   const result: ServiceResult<Room> = await roomService.createRoom(roomData);
   ```

7. **회의실 고유 ID 자동 생성** (UUID)
8. **관리자 회의실 목록 데이터 갱신**

### 출력 (사용자 피드백)
- **성공 시**: "회의실이 성공적으로 등록되었습니다" 메시지
- **중복 오류**: "이미 존재하는 회의실 이름입니다" 메시지
- **입력 오류**: 구체적인 필드별 오류 메시지 표시 (TypeScript 타입 기반)
- **등록된 회의실이 포함된 전체 회의실 목록으로 이동**
- **방금 등록된 회의실 하이라이트 표시**

### 엣지케이스 대응
- 회의실 이름 중복 (대소문자, 공백 포함 유사성 검사)
- 특수문자나 너무 긴 이름 입력 (TypeScript string 타입 체크)
- 수용 인원에 음수나 0, 비현실적으로 큰 숫자 입력 (number 타입 + Zod 검증)
- 네트워크 오류로 인한 중복 등록 방지
- 필수 필드 누락 상태에서 등록 시도

## 4. 관리자 - 회의실 수정

### 입력 (사용자 상호작용)
1. 관리자 페이지의 회의실 목록에서 특정 회의실 선택
2. "수정" 버튼 클릭
3. 수정 모달에서 기존 정보 확인
4. 수정할 필드 변경
   - 회의실 이름 수정
   - 회의실 위치 수정
   - 수용 가능 인원수 수정
5. "수정 완료" 버튼 클릭

### 처리 (시스템 내부 로직)
1. **관리자 권한 확인**
2. **수정 대상 회의실 존재 여부 확인**
   ```typescript
   const room: Room | null = await roomService.getRoomById(roomId);
   ```

3. **변경된 데이터 유효성 검증** (TypeScript + Zod)
4. **회의실 이름 중복 확인** (다른 회의실과)
5. **해당 회의실에 기존 예약이 있는지 확인**
   ```typescript
   const hasActiveReservations = await reservationService.hasActiveReservations(roomId);
   ```

6. **Supabase 데이터베이스 업데이트 실행**
7. **관리자 회의실 목록 데이터 갱신**

### 출력 (사용자 피드백)
- **성공 시**: "회의실 정보가 성공적으로 수정되었습니다" 메시지
- **중복 오류**: "이미 존재하는 회의실 이름입니다" 메시지
- **기존 예약 주의**: "기존 예약에 영향을 줄 수 있습니다" 경고
- **수정된 회의실이 포함된 전체 목록으로 이동**
- **수정된 회의실 하이라이트 표시**

### 엣지케이스 대응
- 수정 중 다른 관리자가 동일 회의실 수정 시도 (낙관적 락킹)
- 회의실에 활성 예약이 있을 때 중요 정보(위치, 인원) 수정
- 존재하지 않는 회의실 ID로 수정 시도 (TypeScript UUID 타입 체크)

## 5. 관리자 - 회의실 삭제

### 입력 (사용자 상호작용)
1. 관리자 페이지의 회의실 목록에서 특정 회의실 선택
2. "삭제" 버튼 클릭
3. 삭제 확인 다이얼로그에서 "확인" 클릭
4. (기존 예약이 있을 경우) 추가 확인 메시지에서 "강제 삭제" 선택

### 처리 (시스템 내부 로직)
1. **관리자 권한 확인**
2. **삭제 대상 회의실 존재 여부 확인**
3. **해당 회의실의 기존 예약 현황 조회**
   ```typescript
   const reservationCount = await reservationService.getActiveReservationCount(roomId);
   ```

4. **예약이 있는 경우 관리자에게 경고 및 선택권 제공**
5. **관련 예약 데이터 처리** (CASCADE DELETE)
6. **회의실 데이터 Supabase에서 삭제**
   ```typescript
   const result: ServiceResult<void> = await roomService.deleteRoom(roomId);
   ```

7. **관리자 회의실 목록 데이터 갱신**

### 출력 (사용자 피드백)
- **예약 없음**: "회의실이 성공적으로 삭제되었습니다" 메시지
- **기존 예약 존재**: "X건의 예약이 있습니다. 정말 삭제하시겠습니까?" 경고
- **삭제 완료**: 관련 예약 처리 결과와 함께 완료 메시지
- **삭제 취소**: "삭제가 취소되었습니다" 메시지
- **업데이트된 회의실 목록 표시**

### 엣지케이스 대응
- 삭제 중 해당 회의실에 새로운 예약 생성 시도
- 존재하지 않는 회의실 ID로 삭제 시도
- 삭제 과정에서 네트워크 오류 발생
- 다른 관리자가 동시에 같은 회의실 삭제 시도

## 기술적 고려사항

### 핵심 기술 스택
- **Frontend**: Next.js 14+ (App Router), TypeScript
- **Backend**: Supabase (PostgreSQL)
- **Deployment**: Vercel
- **Styling**: Tailwind CSS + shadcn-ui
- **Real-time**: Supabase Realtime
- **Form Management**: React Hook Form + Zod
- **Date Handling**: date-fns
- **State Management**: React useState/useReducer

### App Router 구조
```typescript
// src/app/ 구조
src/app/
├── layout.tsx              # 루트 레이아웃
├── page.tsx                # 홈페이지 (예약 현황)
├── my-reservations/        # 내 예약 조회
│   └── page.tsx
└── admin/                  # 관리자 페이지
    └── page.tsx
```

### 구현 원칙
- **Over Engineering 방지**: 기본에 충실한 MVP 구현
- **모던하고 심플한 UI/UX**: Apple 스타일 디자인
- **동시성 처리**: PostgreSQL GIST 제약조건 활용
- **데이터 일관성 보장**: 외래키 제약 및 트랜잭션
- **실시간 동기화**: Supabase Realtime 활용
- **타입 안전성**: TypeScript + Zod 활용

### 데이터플로우 (간략)

#### 1. 회의실 데이터 흐름
```typescript
// 생성
const createResult: ServiceResult<Room> = await roomService.createRoom(roomData);

// 조회
const rooms: Room[] = await roomService.getAllRooms();

// 수정 (기존 예약 확인)
const updateResult: ServiceResult<Room> = await roomService.updateRoom(id, updateData);

// 삭제 (CASCADE DELETE)
const deleteResult: ServiceResult<void> = await roomService.deleteRoom(id);
```

#### 2. 예약 데이터 흐름
```typescript
// 생성 (중복 시간 확인)
const createResult: ServiceResult<Reservation> = await reservationService.createReservation(data);

// 조회 (휴대폰번호+비밀번호 필터링)
const myReservations: Reservation[] = await reservationService.getMyReservations(phone, password);

// 전체 현황 (JOIN 쿼리)
const roomsWithReservations: RoomWithReservations[] = await reservationService.getReservationsByDate(date);

// 취소 (status UPDATE)
const cancelResult: ServiceResult<void> = await reservationService.cancelReservation(id, phone, password);
```

#### 3. 실시간 동기화
```typescript
// 예약 생성/취소 → 전체 현황 페이지 업데이트
const subscription = supabase
  .channel('reservations')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'reservations'
  }, (payload: RealtimePostgresChangesPayload<Reservation>) => {
    // TypeScript 타입 안전성 보장된 업데이트
    updateReservationState(payload);
  })
  .subscribe();

// 회의실 수정/삭제 → 관련 예약 데이터 처리
const roomSubscription = supabase
  .channel('meeting_rooms')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'meeting_rooms'
  }, handleRoomUpdate)
  .subscribe();
```

### TypeScript 타입 안전성
```typescript
// 강타입 인터페이스 정의
interface ReservationFormData {
  reserver_name: string;
  reserver_phone: string;
  reserver_password: string;
  reservation_date: string;
  start_time: string;
  end_time: string;
}

// Zod 스키마를 통한 런타임 검증
const reservationSchema = z.object({
  reserver_name: z.string().min(1, '예약자 이름을 입력해주세요'),
  reserver_phone: z.string().regex(/^010-\d{4}-\d{4}$/, '올바른 휴대폰번호를 입력해주세요'),
  reserver_password: z.string().min(4, '비밀번호는 4자리 이상 입력해주세요'),
  reservation_date: z.string(),
  start_time: z.string(),
  end_time: z.string(),
});

// 타입 추론 및 검증
export type ReservationFormData = z.infer<typeof reservationSchema>;

export function validateReservationData(data: unknown): ReservationFormData {
  return reservationSchema.parse(data);
}
```

### 서버/클라이언트 컴포넌트 구조
```typescript
// 서버 컴포넌트 (기본) - 데이터 패칭
export default async function ReservationPage() {
  const rooms: Room[] = await roomService.getAllRooms();
  const reservations: RoomWithReservations[] = await reservationService.getReservationsByDate(new Date());
  
  return <ReservationCalendar rooms={rooms} initialReservations={reservations} />;
}

// 클라이언트 컴포넌트 (상호작용 필요시)
'use client';
export function ReservationForm({ roomId }: { roomId: string }) {
  const [formData, setFormData] = useState<ReservationFormData>({
    reserver_name: '',
    reserver_phone: '',
    reserver_password: '',
    reservation_date: '',
    start_time: '',
    end_time: '',
  });
  
  const handleSubmit = async (data: ReservationFormData) => {
    const validatedData = validateReservationData(data);
    const result = await reservationService.createReservation({
      ...validatedData,
      room_id: roomId,
    });
    // 결과 처리
  };
  
  // JSX 반환
}
```

### 에러 처리 및 사용자 피드백
```typescript
// 타입 안전한 에러 처리
interface ServiceResult<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// 컴포넌트에서 에러 처리
const [error, setError] = useState<string | null>(null);
const [loading, setLoading] = useState(false);

const handleAction = async () => {
  setLoading(true);
  setError(null);
  
  try {
    const result: ServiceResult<Reservation> = await reservationService.createReservation(data);
    
    if (!result.success) {
      setError(result.error || '작업에 실패했습니다');
      return;
    }
    
    // 성공 처리
    toast.success('예약이 완료되었습니다');
  } catch (error) {
    setError(error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다');
  } finally {
    setLoading(false);
  }
};
```

이 유저플로우는 TypeScript와 Next.js App Router를 기반으로 한 안정적이고 사용자 친화적인 회의실 관리 시스템 구현을 위한 상세하고 실용적인 가이드라인을 제공합니다.