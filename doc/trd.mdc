---
description: Technical Requirements Document for Meeting Room System
globs:
alwaysApply: true
---

# TRD - ?뚯쓽??愿由??쒖뒪??湲곗닠 ?붽뎄?ы빆

## 1. ?쒖뒪???꾪궎?띿쿂

### 1.1 湲곗닠 ?ㅽ깮
- **Frontend**: Next.js 14+ (React 18+, App Router)
- **Database**: Supabase (PostgreSQL 15+)
- **Styling**: Tailwind CSS 3+ + shadcn-ui
- **Deployment**: Vercel
- **Language**: TypeScript
- **Real-time**: Supabase Realtime
- **Form Management**: React Hook Form + Zod

### 1.2 ?꾪궎?띿쿂 ?⑦꽩
```
?뚢?????????????????????  Presentation  ????React Components (UI)
?쒋?????????????????????Business Logic  ????Services (鍮꾩쫰?덉뒪 濡쒖쭅)
?쒋????????????????????? Data Access    ????Supabase Client
?쒋?????????????????????   Database     ????PostgreSQL (Supabase)
?붴???????????????????```

### 1.3 ?대뜑 援ъ“ (App Router)
```
src/
?쒋?? app/                       # Next.js App Router
??  ?쒋?? globals.css           # 湲濡쒕쾶 ?ㅽ?????  ?쒋?? layout.tsx            # 猷⑦듃 ?덉씠?꾩썐
??  ?쒋?? page.tsx              # ?덊럹?댁? (?덉빟 ?꾪솴)
??  ?쒋?? my-reservations/      # ???덉빟 議고쉶
??  ??  ?붴?? page.tsx
??  ?붴?? admin/                # 愿由ъ옄 ?섏씠吏
??      ?붴?? page.tsx
?쒋?? components/
??  ?쒋?? ui/                   # shadcn-ui 而댄룷?뚰듃
??  ?쒋?? admin/                # 愿由ъ옄 而댄룷?뚰듃
??  ?쒋?? user/                 # ?ъ슜??而댄룷?뚰듃
??  ?붴?? common/               # 怨듯넻 而댄룷?뚰듃
?쒋?? lib/
??  ?쒋?? supabase/             # Supabase ?대씪?댁뼵????  ??  ?쒋?? client.ts         # ?대씪?댁뼵???ъ씠????  ??  ?붴?? server.ts         # ?쒕쾭 ?ъ씠????  ?쒋?? services/             # 鍮꾩쫰?덉뒪 濡쒖쭅
??  ?붴?? utils.ts              # ?좏떥由ы떚
?붴?? types/                    # ????뺤쓽
    ?쒋?? database.ts           # Supabase ?곗씠?곕쿋?댁뒪 ???    ?붴?? index.ts              # 怨듯넻 ???```

## 2. ?곗씠?곕쿋?댁뒪 ?ㅺ퀎

### 2.1 ?뚯씠釉??ㅽ궎留?
**meeting_rooms ?뚯씠釉?*
```sql
CREATE TABLE IF NOT EXISTS meeting_rooms (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    location VARCHAR(200) NOT NULL,
    capacity INTEGER NOT NULL CHECK (capacity > 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**reservations ?뚯씠釉?*
```sql
CREATE TABLE IF NOT EXISTS reservations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    room_id UUID NOT NULL REFERENCES meeting_rooms(id) ON DELETE CASCADE,
    reservation_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    reserver_name VARCHAR(50) NOT NULL,
    reserver_phone VARCHAR(20) NOT NULL,
    -- 鍮꾨?踰덊샇???댁떆濡????(pgcrypto: bcrypt)
    password_hash TEXT NOT NULL,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'cancelled')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### 2.2 ?몃뜳??諛??쒖빟議곌굔
```sql
-- ?쒓컙 以묐났 諛⑹? (GIST ?뺤옣 ?꾩슂)
CREATE EXTENSION IF NOT EXISTS btree_gist;

ALTER TABLE reservations 
ADD CONSTRAINT no_overlapping_reservations 
EXCLUDE USING GIST (
    room_id WITH =,
    reservation_date WITH =,
    tsrange(
      (reservation_date::timestamp + start_time),
      (reservation_date::timestamp + end_time)
    ) WITH &&
) WHERE (status = 'active');

-- ?깅뒫 理쒖쟻???몃뜳??CREATE INDEX IF NOT EXISTS idx_reservations_phone ON reservations(reserver_phone);
CREATE INDEX IF NOT EXISTS idx_reservations_date_room ON reservations(reservation_date, room_id, status);
CREATE INDEX IF NOT EXISTS idx_meeting_rooms_name ON meeting_rooms(name);

-- 개별 예약 유효성
ALTER TABLE reservations
ADD CONSTRAINT reservations_end_after_start
CHECK (end_time > start_time);

-- 보안/권한 요약
-- - RLS 활성화: meeting_rooms, reservations
-- - reservations 열 권한: anon/authenticated에게 민감 열(전화, 비밀번호) 미공개
-- - 공개 뷰: public_reservations(id, room_id, reservation_date, start_time, end_time, status, created_at, updated_at)
-- - RPC: create_reservation(), cancel_reservation()로 예약/취소 수행
```

## 3. TypeScript ????뺤쓽

### 3.1 ?곗씠?곕쿋?댁뒪 ???(types/database.ts)
```typescript
export interface Database {
  public: {
    Tables: {
      meeting_rooms: {
        Row: {
          id: string;
          name: string;
          location: string;
          capacity: number;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          name: string;
          location: string;
          capacity: number;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string;
          location?: string;
          capacity?: number;
          created_at?: string;
          updated_at?: string;
        };
      };
      reservations: {
        Row: {
          id: string;
          room_id: string;
          reservation_date: string;
          start_time: string;
          end_time: string;
          reserver_name: string;
          reserver_phone: string;
          // 誘쇨컧 ?뺣낫???몄텧?섏? ?딆쓬 (password_hash 誘몃끂異?
          status: 'active' | 'cancelled';
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          room_id: string;
          reservation_date: string;
          start_time: string;
          end_time: string;
          reserver_name: string;
          reserver_phone: string;
          // ?덉빟 ?앹꽦? RPC瑜??듯빐 泥섎━ (鍮꾨?踰덊샇???쒕쾭?먯꽌 ?댁떆)
          status?: 'active' | 'cancelled';
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          room_id?: string;
          reservation_date?: string;
          start_time?: string;
          end_time?: string;
          reserver_name?: string;
          reserver_phone?: string;
          // 鍮꾨?踰덊샇 媛깆떊? 蹂꾨룄 ?덉감 (吏곸젒 媛깆떊 湲덉?)
          status?: 'active' | 'cancelled';
          created_at?: string;
          updated_at?: string;
        };
      };
    };
  };
}
```

### 3.2 怨듯넻 ???(types/index.ts)
```typescript
export type Room = Database['public']['Tables']['meeting_rooms']['Row'];
export type Reservation = Database['public']['Tables']['reservations']['Row'];

export interface CreateRoomData {
  name: string;
  location: string;
  capacity: number;
}

export interface CreateReservationData {
  room_id: string;
  reservation_date: string;
  start_time: string;
  end_time: string;
  reserver_name: string;
  reserver_phone: string;
  reserver_password: string;
}

export interface ServiceResult<T> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface TimeSlot {
  start: string;
  end: string;
}

export interface RoomWithReservations extends Room {
  reservations: Reservation[];
}

export interface ValidationErrors {
  [key: string]: string;
}

export interface ReservationFormData {
  reserver_name: string;
  reserver_phone: string;
  reserver_password: string;
  reservation_date: string;
  start_time: string;
  end_time: string;
}

export interface RoomFormData {
  name: string;
  location: string;
  capacity: number;
}
```

## 4. 而댄룷?뚰듃 ?ㅺ퀎

### 4.1 ?ъ슜??而댄룷?뚰듃

**BookingCalendar.tsx**
```typescript
interface BookingCalendarProps {
  selectedDate: Date;
  onDateChange: (date: Date) => void;
  onBookingClick: (roomId: string, timeSlot: TimeSlot) => void;
}

interface BookingCalendarState {
  rooms: Room[];
  reservations: Reservation[];
  loading: boolean;
  error: string | null;
}
```

**ReservationForm.tsx**
```typescript
interface ReservationFormProps {
  roomId: string;
  selectedDate: Date;
  selectedTime: TimeSlot;
  onSubmit: (data: ReservationFormData) => Promise<void>;
  onCancel: () => void;
}

interface ReservationFormState {
  formData: ReservationFormData;
  errors: ValidationErrors;
  submitting: boolean;
}
```

**MyReservations.tsx**
```typescript
interface MyReservationsProps {}

interface MyReservationsState {
  phone: string;
  password: string;
  reservations: Reservation[];
  loading: boolean;
  authenticated: boolean;
  error: string | null;
}
```

### 4.2 愿由ъ옄 而댄룷?뚰듃

**AdminRoomList.tsx**
```typescript
interface AdminRoomListProps {}

interface AdminRoomListState {
  rooms: Room[];
  loading: boolean;
  selectedRoom: Room | null;
  showForm: boolean;
  error: string | null;
}
```

**RoomForm.tsx**
```typescript
interface RoomFormProps {
  room?: Room;
  onSubmit: (data: RoomFormData) => Promise<void>;
  onCancel: () => void;
}

interface RoomFormState {
  formData: RoomFormData;
  errors: ValidationErrors;
  submitting: boolean;
}
```

## 5. ?쒕퉬???덉씠???ㅺ퀎

### 5.1 roomService.ts
```typescript
export const roomService = {
  // 紐⑤뱺 ?뚯쓽??議고쉶
  async getAllRooms(): Promise<Room[]> {
    const { data, error } = await supabase
      .from('meeting_rooms')
      .select('*')
      .order('name');
    
    if (error) throw error;
    return data;
  },
  
  // ?뚯쓽???앹꽦  
  async createRoom(data: CreateRoomData): Promise<ServiceResult<Room>> {
    try {
      const { data: room, error } = await supabase
        .from('meeting_rooms')
        .insert(data)
        .select()
        .single();
      
      if (error) throw error;
      
      return { success: true, data: room };
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '?뚯쓽???앹꽦???ㅽ뙣?덉뒿?덈떎' 
      };
    }
  },
  
  // ?뚯쓽???섏젙
  async updateRoom(id: string, data: Partial<CreateRoomData>): Promise<ServiceResult<Room>> {
    try {
      const { data: room, error } = await supabase
        .from('meeting_rooms')
        .update(data)
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      
      return { success: true, data: room };
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '?뚯쓽???섏젙???ㅽ뙣?덉뒿?덈떎' 
      };
    }
  },
  
  // ?뚯쓽????젣
  async deleteRoom(id: string): Promise<ServiceResult<void>> {
    try {
      const { error } = await supabase
        .from('meeting_rooms')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
      
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '?뚯쓽????젣???ㅽ뙣?덉뒿?덈떎' 
      };
    }
  }
};
```

### 5.2 reservationService.ts
```typescript
export const reservationService = {
  // ?덉빟 ?꾪솴 議고쉶
  async getReservationsByDate(date: Date): Promise<RoomWithReservations[]> {
    const dateString = format(date, 'yyyy-MM-dd');
    
    const { data, error } = await supabase
      .from('meeting_rooms')
      .select(`
        *,
        reservations!inner(
          id,
          reservation_date,
          start_time,
          end_time,
          reserver_name,
          status
        )
      `)
      .eq('reservations.reservation_date', dateString)
      .eq('reservations.status', 'active')
      .order('name');
    
    if (error) throw error;
    return data;
  },
  
  // ?덉빟 ?앹꽦
  async createReservation(data: CreateReservationData): Promise<ServiceResult<Reservation>> {
    try {
      // ?쒓컙 以묐났 ?뺤씤
      const conflictCheck = await this.checkTimeConflict(
        data.room_id,
        data.reservation_date,
        data.start_time,
        data.end_time
      );
      
      if (conflictCheck) {
        return { 
          success: false, 
          error: '?좏깮???쒓컙???대? ?덉빟???덉뒿?덈떎' 
        };
      }
      
      const { data: reservation, error } = await supabase
        .from('reservations')
        .insert(data)
        .select()
        .single();
      
      if (error) throw error;
      
      return { success: true, data: reservation };
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '?덉빟 ?앹꽦???ㅽ뙣?덉뒿?덈떎' 
      };
    }
  },
  
  // 媛쒖씤 ?덉빟 議고쉶
  async getMyReservations(phone: string, password: string): Promise<Reservation[]> {
    const { data, error } = await supabase
      .from('reservations')
      .select(`
        *,
        meeting_rooms(name, location)
      `)
      .eq('reserver_phone', phone)
      .eq('reserver_password', password)
      .order('reservation_date', { ascending: false });
    
    if (error) throw error;
    return data;
  },
  
  // ?덉빟 痍⑥냼
  async cancelReservation(id: string, phone: string, password: string): Promise<ServiceResult<void>> {
    try {
      const { error } = await supabase
        .from('reservations')
        .update({ status: 'cancelled' })
        .eq('id', id)
        .eq('reserver_phone', phone)
        .eq('reserver_password', password);
      
      if (error) throw error;
      
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '?덉빟 痍⑥냼???ㅽ뙣?덉뒿?덈떎' 
      };
    }
  },
  
  // ?쒓컙 以묐났 ?뺤씤
  async checkTimeConflict(
    roomId: string, 
    date: string, 
    startTime: string, 
    endTime: string
  ): Promise<boolean> {
    const { data, error } = await supabase
      .rpc('check_time_conflict', {
        p_room_id: roomId,
        p_date: date,
        p_start_time: startTime,
        p_end_time: endTime
      });
    
    if (error) throw error;
    return data > 0;
  }
};
```

## 6. ?ㅼ떆媛??숆린???ㅺ퀎

### 6.1 Supabase Realtime ?ㅼ젙
```typescript
// ?ㅼ떆媛?援щ룆 ?ㅼ젙
const subscription = supabase
  .channel('reservations')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'reservations'
  }, handleRealtimeUpdate)
  .subscribe();

// ?ㅼ떆媛??낅뜲?댄듃 泥섎━
function handleRealtimeUpdate(payload: RealtimePostgresChangesPayload<any>) {
  switch(payload.eventType) {
    case 'INSERT':
      // ???덉빟 異붽?
      setReservations(prev => [...prev, payload.new as Reservation]);
      break;
    case 'UPDATE': 
      // ?덉빟 ?섏젙/痍⑥냼
      setReservations(prev => 
        prev.map(r => r.id === payload.new.id ? payload.new as Reservation : r)
      );
      break;
    case 'DELETE':
      // ?덉빟 ??젣
      setReservations(prev => 
        prev.filter(r => r.id !== payload.old.id)
      );
      break;
  }
}
```

## 7. ?섍꼍 ?ㅼ젙

### 7.1 ?섍꼍蹂??```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

# .env.production (Vercel)
NEXT_PUBLIC_SUPABASE_URL=production-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=production-key
```

### 7.2 Supabase ?대씪?댁뼵???ㅼ젙
```typescript
// lib/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr';
import type { Database } from '@/types/database';

export const createClient = () =>
  createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );

// lib/supabase/server.ts
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import type { Database } from '@/types/database';

export const createClient = () => {
  const cookieStore = cookies();

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          } catch {
            // SSR?먯꽌 荑좏궎 ?ㅼ젙 ?ㅽ뙣 ??臾댁떆
          }
        },
      },
    }
  );
};
```

### 7.3 Tailwind CSS ?ㅼ젙
```javascript
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        // Apple ?ㅽ???而щ윭 ?붾젅??        'apple-blue': '#007AFF',
        'apple-gray': '#F2F2F7',
        'apple-green': '#34C759',
        'apple-red': '#FF3B30',
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],
      },
    },
  },
  plugins: [],
};
```

## 8. ?깅뒫 理쒖쟻??
### 8.1 ?곗씠?곕쿋?댁뒪 理쒖쟻??- **?몃뜳???쒖슜**: ?먯＜ 議고쉶?섎뒗 而щ읆???몃뜳???앹꽦
- **荑쇰━ 理쒖쟻??*: JOIN 荑쇰━ 理쒖냼?? ?꾩슂??而щ읆留?SELECT
- **Connection Pooling**: Supabase ?먮룞 愿由?
### 8.2 ?꾨줎?몄뿏??理쒖쟻??```typescript
// React.memo ?ъ슜 - 遺덊븘?뷀븳 由щ젋?붾쭅 諛⑹?
const RoomCard = React.memo(function RoomCard({ room, onSelect }: RoomCardProps) {
  return <div onClick={() => onSelect(room)}>{room.name}</div>;
});

// useMemo/useCallback ?ъ슜 - 怨꾩궛 鍮꾩슜 理쒖쟻??const timeSlots = useMemo(() => generateTimeSlots(), []);
const handleRoomSelect = useCallback((room: Room) => {
  setSelectedRoom(room);
}, []);
```

## 9. 蹂댁븞 怨좊젮?ы빆

### 9.1 ?곗씠??蹂댁븞
- **RLS 鍮꾪솢?깊솕**: ?⑥닚??援ъ“ ?좎? (?붽뎄?ы빆)
- **?낅젰 寃利?*: ?대씪?댁뼵???쒕쾭 ?묒そ 寃利?- **SQL Injection 諛⑹?**: Parameterized Query ?ъ슜

### 9.2 ?대씪?댁뼵??蹂댁븞
```typescript
// Zod瑜??쒖슜???낅젰 ?곗씠??寃利?import { z } from 'zod';

const reservationSchema = z.object({
  reserver_name: z.string().min(1, '?덉빟???대쫫???낅젰?댁＜?몄슂'),
  reserver_phone: z.string().regex(/^010-\d{4}-\d{4}$/, '?щ컮瑜??대??곕쾲?몃? ?낅젰?댁＜?몄슂'),
  reserver_password: z.string().min(4, '鍮꾨?踰덊샇??4?먮━ ?댁긽 ?낅젰?댁＜?몄슂'),
  reservation_date: z.string(),
  start_time: z.string(),
  end_time: z.string(),
});

export type ReservationFormData = z.infer<typeof reservationSchema>;

export function validateReservationData(data: unknown): ReservationFormData {
  return reservationSchema.parse(data);
}
```

## 10. ?뚯뒪???꾨왂

### 10.1 ?⑥쐞 ?뚯뒪??```typescript
// __tests__/services/roomService.test.ts
import { roomService } from '@/lib/services/roomService';

describe('roomService', () => {
  test('should create room successfully', async () => {
    const roomData: CreateRoomData = {
      name: 'Test Room',
      location: 'Test Location', 
      capacity: 6
    };
    
    const result = await roomService.createRoom(roomData);
    expect(result.success).toBe(true);
    expect(result.data?.name).toBe('Test Room');
  });
  
  test('should handle duplicate room names', async () => {
    const roomData: CreateRoomData = {
      name: 'Duplicate Room',
      location: 'Test Location',
      capacity: 4
    };
    
    await roomService.createRoom(roomData);
    const result = await roomService.createRoom(roomData);
    
    expect(result.success).toBe(false);
    expect(result.error).toContain('already exists');
  });
});
```

## 11. 諛고룷 ?ㅼ젙

### 11.1 Vercel 諛고룷 ?ㅼ젙
```json
// vercel.json
{
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "devCommand": "npm run dev",
  "installCommand": "npm install",
  "env": {
    "NEXT_PUBLIC_SUPABASE_URL": "@supabase-url",
    "NEXT_PUBLIC_SUPABASE_ANON_KEY": "@supabase-anon-key"
  }
}
```

### 11.2 GitHub Actions (?좏깮??
```yaml
# .github/workflows/deploy.yml
name: Deploy to Vercel
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - run: npm run test
```

## 12. 紐⑤땲?곕쭅 諛?濡쒓퉭

### 12.1 ?먮윭 異붿쟻
```typescript
// ?먮윭 泥섎━ ?⑦꽩
try {
  const result = await reservationService.createReservation(data);
  return result;
} catch (error) {
  console.error('Reservation creation failed:', error);
  
  // ?꾨줈?뺤뀡?먯꽌???몃? 紐⑤땲?곕쭅 ?쒕퉬???ъ슜
  if (process.env.NODE_ENV === 'production') {
    // Sentry, LogRocket ??  }
  
  throw new Error('?덉빟 ?앹꽦???ㅽ뙣?덉뒿?덈떎');
}
```

### 12.2 ?깅뒫 紐⑤땲?곕쭅
```typescript
// ?깅뒫 痢≪젙
const startTime = performance.now();
await someAsyncOperation();
const duration = performance.now() - startTime;

if (duration > 1000) {
  console.warn(`Slow operation detected: ${duration}ms`);
}
```

??湲곗닠 臾몄꽌??TypeScript? App Router瑜?湲곕컲?쇰줈 ???덉젙?곸씠怨??뺤옣 媛?ν븳 ?뚯쓽??愿由??쒖뒪??援ы쁽???꾪븳 湲곗닠??媛?대뱶?쇱씤???쒓났?⑸땲??

